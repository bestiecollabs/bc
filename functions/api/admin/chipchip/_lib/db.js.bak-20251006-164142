export function assertAdmin(env, request) {
  const email =
    request.headers.get("Cf-Access-Authenticated-User-Email") ||
    request.headers.get("x-admin-email");
  if (!email) return null;
  const list = String(env.ADMIN_ALLOWLIST || "")
    .toLowerCase().split(",").map(s => s.trim()).filter(Boolean);
  return list.includes(email.toLowerCase()) ? email : null;
}

export function json(data, init = 200, headers = {}) {
  return new Response(JSON.stringify(data), {
    status: init,
    headers: { "content-type": "application/json; charset=utf-8", ...headers }
  });
}

export function notFound() { return new Response("Not found", { status: 404 }); }

export async function q(db, sql, params = []) {
  return await db.prepare(sql).bind(...params).all();
}
export async function run(db, sql, params = []) {
  return await db.prepare(sql).bind(...params).run();
}

export function nowSec() { return Math.floor(Date.now() / 1000); }

// RFC4122-ish ULID fallback simple variant good enough for row ids here
export function ulid() {
  const t = Date.now().toString(36);
  const r = Array.from({length: 16}, () => Math.floor(Math.random()*36).toString(36)).join("");
  return (t + r).slice(0, 26);
}

export function csvResponse(name, header, rows) {
  const esc = v => {
    if (v === null || v === undefined) return "";
    const s = String(v);
    return /[",\n]/.test(s) ? `"${s.replace(/"/g, '""')}"` : s;
  };
  const csv = [header.join(","), ...rows.map(r => r.map(esc).join(","))].join("\n");
  return new Response(csv, {
    status: 200,
    headers: {
      "content-type": "text/csv; charset=utf-8",
      "content-disposition": `attachment; filename="${name}"`
    }
  });
}

export async function getByIds(db, table, ids) {
  if (!ids.length) return [];
  const qMarks = ids.map(() => "?").join(",");
  const res = await q(db, `SELECT * FROM ${table} WHERE id IN (${qMarks})`, ids);
  return res.results || [];
}