export function assertAdmin(env, request) {
  const email =
    request.headers.get("Cf-Access-Authenticated-User-Email") ||
    request.headers.get("x-admin-email");
  if (!email) return null;
  const list = String(env.ADMIN_ALLOWLIST || "")
    .toLowerCase().split(",").map(s => s.trim()).filter(Boolean);
  return list.includes(email.toLowerCase()) ? email : null;
}

export function json(data, init = 200) {
  return new Response(JSON.stringify(data), {
    status: init,
    headers: { "content-type": "application/json; charset=utf-8" }
  });
}

export function notFound() { return new Response("Not found", { status: 404 }); }

export async function q(db, sql, params = []) {
  return await db.prepare(sql).bind(...params).all();
}
export async function run(db, sql, params = []) {
  return await db.prepare(sql).bind(...params).run();
}

// Simple ULID-like id (unique and ordered)
export function ulid(ts = Date.now()) {
  const EN = "0123456789ABCDEFGHJKMNPQRSTVWXYZ";
  const time = ts.toString(36).toUpperCase().padStart(10, "0").slice(-10);
  let rnd = "";
  crypto.getRandomValues(new Uint8Array(16)).forEach(b => rnd += EN[b % EN.length]);
  return (time + rnd).slice(0, 26);
}

// Luhn 10-digit public code with prefix '5' or '3'
export function makePublicCode(prefix /* '5'|'3' */) {
  const rnd = Array.from(crypto.getRandomValues(new Uint32Array(2)))
    .map(n => String(n).slice(-5).padStart(5, "0")).join("").slice(0, 8);
  const body = prefix + rnd; // 9 digits
  const check = luhn(body);
  return body + check;
}
function luhn(num9) {
  const arr = num9.split("").map(d => +d).reverse();
  let sum = 0;
  for (let i = 0; i < arr.length; i++) {
    let d = arr[i];
    if (i % 2 === 1) d = d * 2 - (d > 4 ? 9 : 0);
    sum += d;
  }
  return String((10 - (sum % 10)) % 10);
}

export function normalizeWebsite(raw) {
  if (!raw) return null;
  try {
    const u = new URL(raw.match(/^https?:\/\//i) ? raw : `https://${raw}`);
    const host = u.hostname.replace(/^www\./i, "").toLowerCase();
    const path = u.pathname.replace(/\/+$/, "");
    return (host + path) || host;
  } catch { return raw.toLowerCase().replace(/^www\./, ""); }
}

export function nowSec() { return Math.floor(Date.now() / 1000); }

export function csvResponse(name, header, rows) {
  const esc = v => {
    if (v === null || v === undefined) return "";
    const s = String(v);
    return /[",\n]/.test(s) ? `"${s.replace(/"/g, '""')}"` : s;
  };
  const csv = [header.join(","), ...rows.map(r => r.map(esc).join(","))].join("\n");
  return new Response(csv, {
    status: 200,
    headers: {
      "content-type": "text/csv; charset=utf-8",
      "content-disposition": `attachment; filename="${name}"`
    }
  });
}
